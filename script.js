document.addEventListener('DOMContentLoaded', () => {
    let score = 0;
    let correctAnswer;
    let timer;
    let timeLeft = 60;

    // Kh·ªüi t·∫°o √¢m thanh vui nh·ªôn b·∫±ng Howler.js
    const clickSound = new Howl({
        src: ['boing.mp3'], // √Çm thanh khi nh·∫•n n√∫t Quay l·∫°i
        volume: 0.5 // √Çm l∆∞·ª£ng (t·ª´ 0.0 ƒë·∫øn 1.0)
    });

    const correctSounds = [
        new Howl({ src: ['correct-1.mp3'], volume: 0.5 }),
        new Howl({ src: ['correct-2.mp3'], volume: 0.5 }),
        new Howl({ src: ['correct-3.mp3'], volume: 0.5 })
    ];
    
    const wrongSounds = [
        new Howl({ src: ['wrong-1.mp3'], volume: 0.5 }),
        new Howl({ src: ['wrong-2.mp3'], volume: 0.5 })
    ];

    // H√†m t·∫°o c√¢u h·ªèi ng·∫´u nhi√™n v√† c√°c l·ª±a ch·ªçn ƒë√°p √°n
    function generateQuestion(mode) {
        const operations = ['+', '-', 'x', ':'];
        let operation = operations[Math.floor(Math.random() * operations.length)];
        let num1, num2;

        if (operation === 'x' || operation === ':') {
            num1 = Math.floor(Math.random() * 10) + 1; // S·ªë t·ª´ 1-10
            num2 = Math.floor(Math.random() * 10) + 1; // S·ªë t·ª´ 1-10
        } else {
            num1 = Math.floor(Math.random() * 50) + 1; // S·ªë t·ª´ 1-50
            num2 = Math.floor(Math.random() * 50) + 1; // S·ªë t·ª´ 1-50
        }

        if (operation === ':') {
            num1 = num1 * num2; // ƒê·∫£m b·∫£o ph√©p chia c√≥ k·∫øt qu·∫£ nguy√™n
        } else if (operation === '-') {
            if (num1 < num2) [num1, num2] = [num2, num1]; // ƒê·∫£m b·∫£o s·ªë b·ªã tr·ª´ l·ªõn h∆°n s·ªë tr·ª´
        }

        correctAnswer = eval(`${num1} ${operation.replace('x', '*').replace(':', '/')} ${num2}`);
        document.getElementById('question').innerHTML = `C√¢u h·ªèi: ${num1} ${operation} ${num2} = ?`;

        // T·∫°o danh s√°ch c√°c l·ª±a ch·ªçn ƒë√°p √°n
        const options = generateOptions(correctAnswer);
        displayOptions(options);
    }

    // H√†m t·∫°o c√°c l·ª±a ch·ªçn ƒë√°p √°n (ƒë√°p √°n ƒë√∫ng + c√°c ƒë√°p √°n sai ng·∫´u nhi√™n)
    function generateOptions(correctAnswer) {
        const options = [correctAnswer];
        const range = 10; // Ph·∫°m vi t·∫°o c√°c ƒë√°p √°n sai xung quanh ƒë√°p √°n ƒë√∫ng

        while (options.length < 4) { // T·∫°o 4 l·ª±a ch·ªçn (1 ƒë√∫ng, 3 sai)
            const wrongAnswer = correctAnswer + (Math.floor(Math.random() * range * 2) - range);
            if (!options.includes(wrongAnswer) && wrongAnswer !== correctAnswer && wrongAnswer >= 0) {
                options.push(wrongAnswer);
            }
        }

        // X√°o tr·ªôn c√°c l·ª±a ch·ªçn ƒë·ªÉ ƒë√°p √°n ƒë√∫ng kh√¥ng lu√¥n ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n
        for (let i = options.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [options[i], options[j]] = [options[j], options[i]];
        }

        return options;
    }

    // H√†m hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn ƒë√°p √°n d∆∞·ªõi d·∫°ng n√∫t
    function displayOptions(options) {
        const optionsDiv = document.getElementById('options');
        optionsDiv.innerHTML = ''; // X√≥a c√°c l·ª±a ch·ªçn c≈©
        options.forEach(option => {
            const button = document.createElement('button');
            button.className = 'option-btn';
            button.innerText = option;
            button.addEventListener('click', () => checkAnswer(option, options));
            optionsDiv.appendChild(button);
        });
    }

    // H√†m ki·ªÉm tra ƒë√°p √°n khi tr·∫ª ch·ªçn
    function checkAnswer(selectedAnswer, options) {
        if (selectedAnswer === correctAnswer) {
            // Ph√°t √¢m thanh khi tr·∫£ l·ªùi ƒê√∫ng
            correctSounds[Math.floor(Math.random() * correctSounds.length)].play();
            
            score += 10;
            document.getElementById('score').innerText = score;
            document.getElementById('feedback').innerHTML = 'Ch√≠nh x√°c! B·∫°n th·∫≠t gi·ªèi! üòä';
            document.getElementById('feedback').style.color = 'green';
            Swal.fire({
                title: 'Tuy·ªát v·ªùi!',
                text: 'B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng!',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
            });

            // T√¥ m√†u xanh cho ƒë√°p √°n ƒë√∫ng
            const buttons = document.getElementsByClassName('option-btn');
            for (let button of buttons) {
                if (parseInt(button.innerText) === correctAnswer) {
                    button.classList.add('correct');
                }
                button.disabled = true; // V√¥ hi·ªáu h√≥a c√°c n√∫t sau khi ch·ªçn
            }

            // T·ª± ƒë·ªông chuy·ªÉn sang c√¢u h·ªèi m·ªõi sau 1.5 gi√¢y
            setTimeout(() => {
                generateQuestion();
                document.getElementById('feedback').innerHTML = '';
            }, 1500);
        } else {
            // Ph√°t √¢m thanh khi tr·∫£ l·ªùi Sai
            wrongSounds[Math.floor(Math.random() * wrongSounds.length)].play();

            document.getElementById('feedback').innerHTML = `Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√† ${correctAnswer}. C·ªë l√™n nh√©! üò¢`;
            document.getElementById('feedback').style.color = 'red';
            Swal.fire({
                title: '√îi kh√¥ng!',
                text: `ƒê√°p √°n ƒë√∫ng l√† ${correctAnswer}. C·ªë g·∫Øng l·∫ßn sau nh√©!`,
                icon: 'error',
                timer: 5000,
                showConfirmButton: false
            });

            // T√¥ m√†u ƒë·ªè cho ƒë√°p √°n sai v√† m√†u xanh cho ƒë√°p √°n ƒë√∫ng
            const buttons = document.getElementsByClassName('option-btn');
            for (let button of buttons) {
                if (parseInt(button.innerText) === selectedAnswer) {
                    button.classList.add('wrong');
                }
                if (parseInt(button.innerText) === correctAnswer) {
                    button.classList.add('correct');
                }
                button.disabled = true; // V√¥ hi·ªáu h√≥a c√°c n√∫t sau khi ch·ªçn
            }

            // T·ª± ƒë·ªông chuy·ªÉn sang c√¢u h·ªèi m·ªõi sau 1.5 gi√¢y
            setTimeout(() => {
                generateQuestion();
                document.getElementById('feedback').innerHTML = '';
            }, 5000);
        }
    }

    // H√†m b·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô luy·ªán t·∫≠p
    function startPracticeMode() {
        clickSound.play();

        document.getElementById('mode-selection').style.display = 'none';
        document.getElementById('game-area').style.display = 'block';
        document.getElementById('timer').style.display = 'none';
        score = 0;
        document.getElementById('score').innerText = score;
        generateQuestion();
    }

    // H√†m b·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô thi ƒë·∫•u
    function startChallengeMode() {
        clickSound.play();

        document.getElementById('mode-selection').style.display = 'none';
        document.getElementById('game-area').style.display = 'block';
        document.getElementById('timer').style.display = 'block';
        score = 0;
        timeLeft = 60;
        document.getElementById('score').innerText = score;
        document.getElementById('time-left').innerText = timeLeft;
        generateQuestion();

        timer = setInterval(() => {
            timeLeft--;
            document.getElementById('time-left').innerText = timeLeft;
            if (timeLeft <= 0) {
                clearInterval(timer);
                Swal.fire({
                    title: 'H·∫øt gi·ªù!',
                    text: `Tr√≤ ch∆°i k·∫øt th√∫c! ƒêi·ªÉm c·ªßa b·∫°n l√† ${score}.`,
                    icon: 'info',
                    confirmButtonText: 'Ch∆°i l·∫°i'
                }).then(() => {
                    startChallengeMode();
                });
            }
        }, 1000);
    }

    // H√†m b·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô h·ªçc b·∫£ng c·ª≠u ch∆∞∆°ng
    function startTableMode() {
        clickSound.play();

        document.getElementById('mode-selection').style.display = 'none';
        document.getElementById('table-area').style.display = 'block';
        document.getElementById('table-number').addEventListener('change', (e) => {
            const number = parseInt(e.target.value);
            if (number) {
                let content = '';
                for (let i = 1; i <= 10; i++) {
                    content += `${number} x ${i} = ${number * i}<br>`;
                }
                document.getElementById('table-content').innerHTML = content;
            }
        });
    }

    // H√†m quay l·∫°i m√†n h√¨nh ch√≠nh
    function returnToMainMenu() {
        // Ph√°t √¢m thanh vui nh·ªôn
        clickSound.play();

        // Hi·ªÉn th·ªã l·∫°i m√†n h√¨nh ch√≠nh
        document.getElementById('mode-selection').style.display = 'block';

        // ·∫®n khu v·ª±c tr√≤ ch∆°i v√† b·∫£ng c·ª≠u ch∆∞∆°ng
        document.getElementById('game-area').style.display = 'none';
        document.getElementById('table-area').style.display = 'none';

        // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô Thi ƒê·∫•u, d·ª´ng b·ªô ƒë·∫øm th·ªùi gian
        if (timer) {
            clearInterval(timer);
            timer = null;
        }

        // ƒê·∫∑t l·∫°i ƒëi·ªÉm v√† th√¥ng b√°o
        score = 0;
        document.getElementById('score').innerText = score;
        document.getElementById('feedback').innerHTML = '';
    }

    // ƒê·∫£m b·∫£o c√°c h√†m to√†n c·ª•c c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ HTML
    window.startPracticeMode = startPracticeMode;
    window.startChallengeMode = startChallengeMode;
    window.startTableMode = startTableMode;
    window.returnToMainMenu = returnToMainMenu;
});